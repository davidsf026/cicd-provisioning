apiVersion: v1
kind: ConfigMap
metadata:
  name: nexussetup
  labels:
    app: nexus-setup
data:
  config-nexus.sh: |-    
    #!/bin/bash
    
    NS=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)
    NEXUS_USER=admin:admin123
    NEXUS_SVC_NAME=$(oc  -n ${NS} get svc -l app=sonatype-nexus -o name)
    NEXUS_URL=http://$( oc -n ${NS} get ${NEXUS_SVC_NAME} -o jsonpath --template='{.metadata.name}:{.spec.ports[].port}')
    
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    NC='\033[0m' # No Color
    
    echo "waiting for nexus pod ready..."
    oc -n ${NS} wait pod -lapp="sonatype-nexus" --for=condition=Ready --timeout=600s || exit $?
    
    wait_for_nexus_service() {
        local i=0
        HOST=${NEXUS_URL}/service/rest/v1/status
        until [ $(curl -s -o /dev/null -w %{http_code} ${HOST}) = "200" ]
        do
            echo "🧅 Waiting for 200 response from ${HOST}"
            sleep 10
            HOST=${NEXUS_URL}/service/rest/v1/status
            ((i=i+1))
            if [ $i -gt 100 ]; then
                echo -e "${RED}Failed - nexus ${HOST} never ready.${NC}"
                exit 1
            fi
        done
    }
    echo "waiting for nexus api ready..."
    wait_for_nexus_service
    
    # helm hosted via rest
    echo "🐺 creating [helm-charts helm-charts-stable helm-charts-incubator] helm hosted repo"
    helmList='[helm-charts helm-charts-stable helm-charts-incubator]'
    helmList=`echo "$helmList" | sed -r 's/\[|\]//g'`
    for repo in ${helmList}; do
        curl -s -k -X POST "${NEXUS_URL}/service/rest/beta/repositories/helm/hosted" \
        --user "${NEXUS_USER}" \
        -H "accept: application/json" \
        -H "Content-Type: application/json" \
        -d "{ \"name\": \"${repo}\", \"online\": true, \"storage\": { \"blobStoreName\": \"default\", \"strictContentTypeValidation\": true, \"writePolicy\": \"ALLOW\" }}"
    done
    
    # npm proxy
    echo "🐛 creating labs-npm npm proxy"
    curl -s -k -X POST "${NEXUS_URL}/service/rest/beta/repositories/npm/proxy" \
      --user "${NEXUS_USER}" \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -d "{ \"name\": \"labs-npm\", \"online\": true, \"storage\": { \"blobStoreName\": \"default\", \"strictContentTypeValidation\": true}, \"proxy\": { \"remoteUrl\": \"https://registry.npmjs.org\", \"contentMaxAge\": 1440, \"metadataMaxAge\": 1440 }, \"httpClient\": { \"blocked\": false, \"autoBlock\": false, \"connection\": { \"retries\": 0, \"userAgentSuffix\": \"string\", \"timeout\": 60, \"enableCircularRedirects\": false, \"enableCookies\": false}}, \"negativeCache\": { \"enabled\": false, \"timeToLive\": 1440 } }"
    
    
    # Red Hat GA Repository
    echo "🔥 creating red-hat-ga red hat ga proxy"
    curl -s -k -X POST "${NEXUS_URL}/service/rest/v1/repositories/maven/proxy" \
      --user "${NEXUS_USER}" \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -d "{ \"name\": \"red-hat-ga\", \"online\": true, \"storage\": { \"blobStoreName\": \"default\", \"strictContentTypeValidation\": true }, \"cleanup\": { \"policyNames\": [ \"string\" ] }, \"proxy\": { \"remoteUrl\": \"https://maven.repository.redhat.com/ga\", \"contentMaxAge\": 1440, \"metadataMaxAge\": 1440 }, \"negativeCache\": { \"enabled\": true, \"timeToLive\": 1440 }, \"httpClient\": { \"blocked\": false, \"autoBlock\": true, \"connection\": { \"retries\": 0, \"userAgentSuffix\": \"string\", \"timeout\": 60, \"enableCircularRedirects\": false, \"enableCookies\": false, \"useTrustStore\": false }, \"authentication\": { \"type\": \"username\", \"username\": \"string\", \"password\": \"string\", \"ntlmHost\": \"string\", \"ntlmDomain\": \"string\", \"preemptive\": false } }, \"routingRule\": \"string\", \"maven\": { \"versionPolicy\": \"MIXED\", \"layoutPolicy\": \"STRICT\" }}"
    
    # Red Hat Early Access Repository
    echo "🔥 creating red-hat-ea red hat early access proxy"
    curl -s -k -X POST "${NEXUS_URL}/service/rest/v1/repositories/maven/proxy" \
      --user "${NEXUS_USER}" \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -d "{ \"name\": \"red-hat-ea\", \"online\": true, \"storage\": { \"blobStoreName\": \"default\", \"strictContentTypeValidation\": true }, \"cleanup\": { \"policyNames\": [ \"string\" ] }, \"proxy\": { \"remoteUrl\": \"https://maven.repository.redhat.com/earlyaccess/all\", \"contentMaxAge\": 1440, \"metadataMaxAge\": 1440 }, \"negativeCache\": { \"enabled\": true, \"timeToLive\": 1440 }, \"httpClient\": { \"blocked\": false, \"autoBlock\": true, \"connection\": { \"retries\": 0, \"userAgentSuffix\": \"string\", \"timeout\": 60, \"enableCircularRedirects\": false, \"enableCookies\": false, \"useTrustStore\": false }, \"authentication\": { \"type\": \"username\", \"username\": \"string\", \"password\": \"string\", \"ntlmHost\": \"string\", \"ntlmDomain\": \"string\", \"preemptive\": false } }, \"routingRule\": \"string\", \"maven\": { \"versionPolicy\": \"MIXED\", \"layoutPolicy\": \"STRICT\" }}"
    
    # Optionally include RedHat Repositories in maven-public
    # Maven Public Group
    echo "🦄 Adding repos to Maven Group"
    curl -s -k -X PUT "${NEXUS_URL}/service/rest/v1/repositories/maven/group/maven-public" \
      --user "${NEXUS_USER}" \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -d "{ \"name\": \"maven-public\", \"format\": \"maven2\", \"online\": true, \"storage\": { \"blobStoreName\": \"default\", \"strictContentTypeValidation\": true }, \"group\": { \"memberNames\": [\"red-hat-ea\", \"red-hat-ga\",\"maven-releases\", \"maven-snapshots\", \"maven-central\"]}, \"type\": \"group\"}"
    
    # raw hosted via rest
    echo "🐺 creating labs-static raw hosted repo"
    curl -s -k -X POST "${NEXUS_URL}/service/rest/beta/repositories/raw/hosted" \
      --user "${NEXUS_USER}" \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -d "{ \"name\": \"labs-static\", \"online\": true, \"storage\": { \"blobStoreName\": \"default\", \"strictContentTypeValidation\": true, \"writePolicy\": \"ALLOW\" }}"
    
    # PyPi Proxy
    echo "🐍 Adding PyPi Proxy"
    curl -s -k -X POST "${NEXUS_URL}/service/rest/v1/repositories/pypi/proxy" \
      --user "${NEXUS_USER}" \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -d "{ \"name\" : \"pypi\", \"format\" : \"pypi\", \"proxy\": { \"remoteUrl\": \"https://pypi.org\", \"contentMaxAge\": 1440, \"metadataMaxAge\": 1440 }, \"storage\": { \"blobStoreName\": \"default\", \"strictContentTypeValidation\": true }, \"negativeCache\": { \"enabled\": true, \"timeToLive\": 1440 }, \"online\": true, \"httpClient\": { \"blocked\": false, \"autoBlock\": true, \"connection\": { \"retries\": 0, \"userAgentSuffix\": \"string\", \"timeout\": 60, \"enableCircularRedirects\": false, \"enableCookies\": false, \"useTrustStore\": false }, \"authentication\": { \"type\": \"username\", \"username\": \"string\", \"password\": \"string\", \"ntlmHost\": \"string\", \"ntlmDomain\": \"string\", \"preemptive\": false } }}"  
    
    # disable anonymous access by not running onboarding
    oc -n ${NS} exec $(oc -n ${NS} get pods -o custom-columns=NAME:.metadata.name --no-headers -lapp="sonatype-nexus") -- bash -c 'if ! grep -q "nexus.onboarding.enabled" /nexus-data/etc/nexus.properties; then echo "nexus.onboarding.enabled=false" >> /nexus-data/etc/nexus.properties; fi'
    
    echo "😇 restarting nexus..."
    oc -n ${NS} delete pod -lapp="sonatype-nexus"
    oc -n ${NS} wait pod -lapp="sonatype-nexus" --for=condition=Ready --timeout=300s
    
    echo -e "${GREEN}Done!${NC}"
